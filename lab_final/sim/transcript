# do run.do run_test.bat 15 0 777
# 1
# Model Technology ModelSim Microsemi vlog 10.5c Compiler 2016.07 Jul 21 2016
# Start time: 15:51:52 on May 03,2023
# vlog -reportprogress 300 -sv -timescale 1ps/1ps -work work -f sources.txt 
# -- Compiling package instr_register_pkg
# -- Compiling module instr_register
# -- Importing package instr_register_pkg
# -- Compiling module instr_register_test
# -- Compiling module top
# 
# Top level modules:
# 	top
# End time: 15:51:52 on May 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vsim -novopt -quiet -nocoverage "+notimingchecks" "+nowarnTSCALE" -sva top -G/top/test/RANDOM_CASE=0 -G/top/test/test_name=run_test.bat -G/top/test/seed=777 -G/top/test/NUMBER_OF_TRANSACTIONS=15 
# Start time: 15:51:52 on May 03,2023
# //  ModelSim Microsemi 10.5c Jul 21 2016
# //
# //  Copyright 1991-2016 Mentor Graphics Corporation
# //  All Rights Reserved.
# //
# //  ModelSim Microsemi and its associated documentation contain trade
# //  secrets and commercial or financial information that are the property of
# //  Mentor Graphics Corporation and are privileged, confidential,
# //  and exempt from disclosure under the Freedom of Information Act,
# //  5 U.S.C. Section 552. Furthermore, this information
# //  is prohibited from disclosure under the Trade Secrets Act,
# //  18 U.S.C. Section 1905.
# //
# 
# 
# ***********************************************************
# ***  THIS IS NOT A SELF-CHECKING TESTBENCH (YET).  YOU  ***
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# 
# Reseting the instruction register...
# 
# Writing values to register stack...
# Writing to register location 0: 
#   opcode = 4 (SUB)
#   operand_a = -10
#   operand_b = 0
# 
# Writing to register location 1: 
#   opcode = 2 (PASSB)
#   operand_a = 0
#   operand_b = 4
# 
# Writing to register location 2: 
#   opcode = 7 (MOD)
#   operand_a = 4
#   operand_b = 2
# 
# Writing to register location 3: 
#   opcode = 3 (ADD)
#   operand_a = 2
#   operand_b = 15
# 
# Writing to register location 4: 
#   opcode = 2 (PASSB)
#   operand_a = 15
#   operand_b = 11
# 
# Writing to register location 5: 
#   opcode = 1 (PASSA)
#   operand_a = 11
#   operand_b = 2
# 
# Writing to register location 6: 
#   opcode = 3 (ADD)
#   operand_a = -14
#   operand_b = 9
# 
# Writing to register location 7: 
#   opcode = 1 (PASSA)
#   operand_a = -7
#   operand_b = 3
# 
# Writing to register location 8: 
#   opcode = 5 (MULT)
#   operand_a = -13
#   operand_b = 9
# 
# Writing to register location 9: 
#   opcode = 0 (ZERO)
#   operand_a = 9
#   operand_b = 13
# 
# Writing to register location 10: 
#   opcode = 6 (DIV)
#   operand_a = -3
#   operand_b = 0
# 
# Writing to register location 11: 
#   opcode = 1 (PASSA)
#   operand_a = 0
#   operand_b = 6
# 
# Writing to register location 12: 
#   opcode = 2 (PASSB)
#   operand_a = 6
#   operand_b = 1
# 
# Writing to register location 13: 
#   opcode = 4 (SUB)
#   operand_a = -15
#   operand_b = 2
# 
# Writing to register location 14: 
#   opcode = 2 (PASSB)
#   operand_a = 2
#   operand_b = 12
# 
# 
# Reading back the same register locations written...
# Read from register location 0: 
#   opcode = 4 (SUB)
#   operand_a = -10
#   operand_b = 0
# 
#   rezultat = -10
# 
# Read from register location 1: 
#   opcode = 2 (PASSB)
#   operand_a = 0
#   operand_b = 4
# 
#   rezultat = 4
# 
# Read from register location 2: 
#   opcode = 7 (MOD)
#   operand_a = 4
#   operand_b = 2
# 
#   rezultat = 0
# 
# Read from register location 3: 
#   opcode = 3 (ADD)
#   operand_a = 2
#   operand_b = 15
# 
#   rezultat = 17
# 
# Read from register location 4: 
#   opcode = 2 (PASSB)
#   operand_a = 15
#   operand_b = 11
# 
#   rezultat = 11
# 
# Read from register location 5: 
#   opcode = 1 (PASSA)
#   operand_a = 11
#   operand_b = 2
# 
#   rezultat = 11
# 
# Read from register location 6: 
#   opcode = 3 (ADD)
#   operand_a = -14
#   operand_b = 9
# 
#   rezultat = -5
# 
# Read from register location 7: 
#   opcode = 1 (PASSA)
#   operand_a = -7
#   operand_b = 3
# 
#   rezultat = -7
# 
# Read from register location 8: 
#   opcode = 5 (MULT)
#   operand_a = -13
#   operand_b = 9
# 
#   rezultat = 81
# 
# Read from register location 9: 
#   opcode = 0 (ZERO)
#   operand_a = 9
#   operand_b = 13
# 
#   rezultat = 0
# 
# Read from register location 10: 
#   opcode = 6 (DIV)
#   operand_a = -3
#   operand_b = 0
# 
#   rezultat = x
# 
# Read from register location 11: 
#   opcode = 1 (PASSA)
#   operand_a = 0
#   operand_b = 6
# 
#   rezultat = 0
# 
# Read from register location 12: 
#   opcode = 2 (PASSB)
#   operand_a = 6
#   operand_b = 1
# 
#   rezultat = 1
# 
# Read from register location 13: 
#   opcode = 4 (SUB)
#   operand_a = -15
#   operand_b = 2
# 
#   rezultat = -17
# 
# Read from register location 14: 
#   opcode = 2 (PASSB)
#   operand_a = 2
#   operand_b = 12
# 
#   rezultat = 12
# 
# ** Error: 
#  i = 0: opcode = 4 (SUB)  operand_a = -10 operand_b = 0 
#  expected result = -10  actual result = 0
#    Time: 336 ns  Scope: top.test.check_results File: ../../lab5/lab01_testbench-interface/instr_register_test.sv Line: 181
# ** Error: 
#  i = 1: opcode = 2 (PASSB)  operand_a = 0 operand_b = 4 
#  expected result = 4  actual result = -10
#    Time: 336 ns  Scope: top.test.check_results File: ../../lab5/lab01_testbench-interface/instr_register_test.sv Line: 181
# ** Error: 
#  i = 2: opcode = 7 (MOD)  operand_a = 4 operand_b = 2 
#  expected result = 0  actual result = 4
#    Time: 336 ns  Scope: top.test.check_results File: ../../lab5/lab01_testbench-interface/instr_register_test.sv Line: 181
# ** Error: 
#  i = 3: opcode = 3 (ADD)  operand_a = 2 operand_b = 15 
#  expected result = 17  actual result = 0
#    Time: 336 ns  Scope: top.test.check_results File: ../../lab5/lab01_testbench-interface/instr_register_test.sv Line: 181
# ** Error: 
#  i = 4: opcode = 2 (PASSB)  operand_a = 15 operand_b = 11 
#  expected result = 11  actual result = 17
#    Time: 336 ns  Scope: top.test.check_results File: ../../lab5/lab01_testbench-interface/instr_register_test.sv Line: 181
# ** Error: 
#  i = 6: opcode = 3 (ADD)  operand_a = -14 operand_b = 9 
#  expected result = -5  actual result = 11
#    Time: 336 ns  Scope: top.test.check_results File: ../../lab5/lab01_testbench-interface/instr_register_test.sv Line: 181
# ** Error: 
#  i = 7: opcode = 1 (PASSA)  operand_a = -7 operand_b = 3 
#  expected result = -7  actual result = -5
#    Time: 336 ns  Scope: top.test.check_results File: ../../lab5/lab01_testbench-interface/instr_register_test.sv Line: 181
# ** Error: 
#  i = 8: opcode = 5 (MULT)  operand_a = -13 operand_b = 9 
#  expected result = -117  actual result = -7
#    Time: 336 ns  Scope: top.test.check_results File: ../../lab5/lab01_testbench-interface/instr_register_test.sv Line: 181
# ** Error: 
#  i = 9: opcode = 0 (ZERO)  operand_a = 9 operand_b = 13 
#  expected result = 0  actual result = 81
#    Time: 336 ns  Scope: top.test.check_results File: ../../lab5/lab01_testbench-interface/instr_register_test.sv Line: 181
# ** Error: 
#  i = 12: opcode = 2 (PASSB)  operand_a = 6 operand_b = 1 
#  expected result = 1  actual result = 0
#    Time: 336 ns  Scope: top.test.check_results File: ../../lab5/lab01_testbench-interface/instr_register_test.sv Line: 181
# ** Error: 
#  i = 13: opcode = 4 (SUB)  operand_a = -15 operand_b = 2 
#  expected result = -17  actual result = 1
#    Time: 336 ns  Scope: top.test.check_results File: ../../lab5/lab01_testbench-interface/instr_register_test.sv Line: 181
# 
# Errors :          11
# 
#  TEST FAILLED
# 
# ***********************************************************
# ***  THIS IS NOT A SELF-CHECKING TESTBENCH (YET).  YOU  ***
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# 
# ** Note: $finish    : ../../lab5/lab01_testbench-interface/instr_register_test.sv(119)
#    Time: 336 ns  Iteration: 1  Instance: /top/test
# 1
# Break in Module instr_register_test at ../../lab5/lab01_testbench-interface/instr_register_test.sv line 119
# Simulation Breakpoint: 1
# Break in Module instr_register_test at ../../lab5/lab01_testbench-interface/instr_register_test.sv line 119
# MACRO ./run.do PAUSED at line 46
# End time: 15:57:36 on May 03,2023, Elapsed time: 0:05:44
# Errors: 11, Warnings: 0
