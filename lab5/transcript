vsim work.top
# vsim work.top 
# Start time: 19:13:40 on Apr 05,2023
# //  ModelSim Microsemi 10.5c Jul 21 2016
# //
# //  Copyright 1991-2016 Mentor Graphics Corporation
# //  All Rights Reserved.
# //
# //  ModelSim Microsemi and its associated documentation contain trade
# //  secrets and commercial or financial information that are the property of
# //  Mentor Graphics Corporation and are privileged, confidential,
# //  and exempt from disclosure under the Freedom of Information Act,
# //  5 U.S.C. Section 552. Furthermore, this information
# //  is prohibited from disclosure under the Trade Secrets Act,
# //  18 U.S.C. Section 1905.
# //
# Loading sv_std.std
# Loading work.instr_register_pkg
# Loading work.top
# Loading work.instr_register_test
# Loading work.instr_register
add wave sim:/top/*
run -a
# 
# 
# ***********************************************************
# ***  THIS IS NOT A SELF-CHECKING TESTBENCH (YET).  YOU  ***
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# 
# Reseting the instruction register...
# 
# Writing values to register stack...
# Writing to register location 0: 
#   opcode = 1 (PASSA)
#   operand_a = -12
#   operand_b = 7
# 
# Writing to register location 0: 
#   opcode = 0 (ZERO)
#   operand_a = -9
#   operand_b = 1
# 
# Writing to register location 0: 
#   opcode = 7 (MOD)
#   operand_a = -15
#   operand_b = 8
# 
# Writing to register location 0: 
#   opcode = 5 (MULT)
#   operand_a = -8
#   operand_b = 7
# 
# Writing to register location 0: 
#   opcode = 3 (ADD)
#   operand_a = -9
#   operand_b = 5
# 
# Writing to register location 0: 
#   opcode = 4 (SUB)
#   operand_a = 5
#   operand_b = 3
# 
# Writing to register location 0: 
#   opcode = 3 (ADD)
#   operand_a = 3
#   operand_b = 12
# 
# Writing to register location 0: 
#   opcode = 6 (DIV)
#   operand_a = 12
#   operand_b = 3
# 
# Writing to register location 0: 
#   opcode = 1 (PASSA)
#   operand_a = 3
#   operand_b = 14
# 
# Writing to register location 0: 
#   opcode = 1 (PASSA)
#   operand_a = -2
#   operand_b = 9
# 
# Writing to register location 0: 
#   opcode = 7 (MOD)
#   operand_a = 9
#   operand_b = 9
# 
# Writing to register location 0: 
#   opcode = 3 (ADD)
#   operand_a = 9
#   operand_b = 7
# 
# Writing to register location 0: 
#   opcode = 5 (MULT)
#   operand_a = 7
#   operand_b = 3
# 
# Writing to register location 0: 
#   opcode = 7 (MOD)
#   operand_a = 3
#   operand_b = 5
# 
# Writing to register location 0: 
#   opcode = 0 (ZERO)
#   operand_a = -11
#   operand_b = 15
# 
# Writing to register location 0: 
#   opcode = 6 (DIV)
#   operand_a = 15
#   operand_b = 0
# 
# Writing to register location 0: 
#   opcode = 4 (SUB)
#   operand_a = 0
#   operand_b = 14
# 
# Writing to register location 0: 
#   opcode = 3 (ADD)
#   operand_a = -2
#   operand_b = 4
# 
# Writing to register location 0: 
#   opcode = 0 (ZERO)
#   operand_a = -12
#   operand_b = 3
# 
# Writing to register location 0: 
#   opcode = 4 (SUB)
#   operand_a = -13
#   operand_b = 8
# 
# 
# Reading back the same register locations written...
# Read from register location 0: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   rezultat = 0
# 
# Read from register location 1: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   rezultat = 0
# 
# Read from register location 2: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   rezultat = 0
# 
# Read from register location 3: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   rezultat = 0
# 
# Read from register location 4: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   rezultat = 0
# 
# Read from register location 5: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   rezultat = 0
# 
# Read from register location 6: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   rezultat = 0
# 
# Read from register location 7: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   rezultat = 0
# 
# Read from register location 8: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   rezultat = 0
# 
# Read from register location 9: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   rezultat = 0
# 
# Read from register location 10: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   rezultat = 0
# 
# Read from register location 11: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   rezultat = 0
# 
# Read from register location 12: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   rezultat = 0
# 
# Read from register location 13: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   rezultat = 0
# 
# Read from register location 14: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   rezultat = 0
# 
# Read from register location 15: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   rezultat = 0
# 
# Read from register location 16: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   rezultat = 0
# 
# Read from register location 17: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   rezultat = 0
# 
# Read from register location 18: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   rezultat = 0
# 
# Read from register location 19: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   rezultat = 0
# 
# 
# ***********************************************************
# ***  THIS IS NOT A SELF-CHECKING TESTBENCH (YET).  YOU  ***
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# 
# ** Note: $finish    : C:/Users/HP/Desktop/lab5/lab01_testbench-interface/instr_register_test.sv(84)
#    Time: 436 ns  Iteration: 1  Instance: /top/test
# 1
# Break in Module instr_register_test at C:/Users/HP/Desktop/lab5/lab01_testbench-interface/instr_register_test.sv line 84
# could not find interpreter "ScintillaTk"
quit -sim
# End time: 19:14:21 on Apr 05,2023, Elapsed time: 0:00:41
# Errors: 1, Warnings: 0
vlog -reportprogress 300 -work work C:/Users/HP/Desktop/lab5/lab_dut/instr_register_pkg.sv
# Model Technology ModelSim Microsemi vlog 10.5c Compiler 2016.07 Jul 21 2016
# Start time: 19:14:43 on Apr 05,2023
# vlog -reportprogress 300 -work work C:/Users/HP/Desktop/lab5/lab_dut/instr_register_pkg.sv 
# -- Compiling package instr_register_pkg
# 
# Top level modules:
# 	--none--
# End time: 19:14:43 on Apr 05,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
vlog -reportprogress 300 -work work C:/Users/HP/Desktop/lab5/lab_dut/instr_register.sv
# Model Technology ModelSim Microsemi vlog 10.5c Compiler 2016.07 Jul 21 2016
# Start time: 19:14:44 on Apr 05,2023
# vlog -reportprogress 300 -work work C:/Users/HP/Desktop/lab5/lab_dut/instr_register.sv 
# -- Compiling module instr_register
# -- Importing package instr_register_pkg
# 
# Top level modules:
# 	instr_register
# End time: 19:14:44 on Apr 05,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
vlog -reportprogress 300 -work work C:/Users/HP/Desktop/lab5/lab01_testbench-interface/instr_register_test.sv
# Model Technology ModelSim Microsemi vlog 10.5c Compiler 2016.07 Jul 21 2016
# Start time: 19:14:48 on Apr 05,2023
# vlog -reportprogress 300 -work work C:/Users/HP/Desktop/lab5/lab01_testbench-interface/instr_register_test.sv 
# -- Compiling module instr_register_test
# -- Importing package instr_register_pkg
# 
# Top level modules:
# 	instr_register_test
# End time: 19:14:48 on Apr 05,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
vlog -reportprogress 300 -work work C:/Users/HP/Desktop/lab5/lab01_testbench-interface/top.sv
# Model Technology ModelSim Microsemi vlog 10.5c Compiler 2016.07 Jul 21 2016
# Start time: 19:14:49 on Apr 05,2023
# vlog -reportprogress 300 -work work C:/Users/HP/Desktop/lab5/lab01_testbench-interface/top.sv 
# -- Compiling module top
# -- Importing package instr_register_pkg
# 
# Top level modules:
# 	top
# End time: 19:14:49 on Apr 05,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
